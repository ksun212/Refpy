(set-logic UFLIA)

(declare-fun C__Ctor (Int) Int)
(declare-fun C__Inst (Int) Bool)
(declare-fun C__Cast (Int) Int)
(declare-fun D__Ctor (Int Int) Int)
(declare-fun D__Inst (Int) Bool)
(declare-fun D__Cast (Int) Int)
(declare-fun C__f1 (Int) Int)
(declare-fun C____init__ (Int ) Int)
(declare-fun D__f1 (Int) Int)
(declare-fun D__f2 (Int) Int)
(declare-fun D____init__ (Int ) Int)
(declare-fun D__f (Int  Int ) Int)
(declare-const x1 Int)
(declare-const cond Bool)
(declare-const x Int)
(declare-const v Int)
(assert (not (and (=>  (and true (and (= (C__f1 x) 1) (or (exists ((x9 Int))(and (= (C__Ctor x9) x) (C__Inst x) (and (= (C__f1 x)  x9) ) )) (exists ((x10 Int) (x11 Int))(and (= (D__Ctor x10 x11) x) (D__Inst x) (and (= (D__f1 x)  x10) (= (D__f2 x)  x11) ) )) ) ) true (= cond (or (exists ((x12 Int) (x13 Int))(and (= (D__Ctor x12 x13) x) (D__Inst x) (and (= (D__f1 x)  x12) (= (D__f2 x)  x13) ) )) )) (= (not (or (exists ((x14 Int) (x15 Int))(and (= (D__Ctor x14 x15) x) (D__Inst x) (and (= (D__f1 x)  x14) (= (D__f2 x)  x15) ) )) )) true) true (and (and (= (C__f1 x) x1) (or (exists ((x16 Int))(and (= (C__Ctor x16) x) (C__Inst x) (and (= (C__f1 x)  x16) ) )) (exists ((x17 Int) (x18 Int))(and (= (D__Ctor x17 x18) x) (D__Inst x) (and (= (D__f1 x)  x17) (= (D__f2 x)  x18) ) )) ) ) (= v x1)) ) (and (> v 0) ) ) true ) ))
(check-sat)